{"pageProps":{"postData":{"id":"xv6-ls","code":"int main(int argc, char *argv[]) {\n  if (argc < 2) {\n    ls(\".\");\n    exit(0);\n  }\n\n  for (int i = 1; i < argc; i++)\n    ls(argv[i]);\n\n  exit(0);\n}\n","language":"c","contentHtml":"<p>最初っぽいので ls にしました。</p>\n<p>GNU とか BSD のは記述量とか多そうだったので教育用に作られた Linux である<a href=\"https://pdos.csail.mit.edu/6.828/2012/xv6.html\">xv6</a>のなかの ls を読んでみます。</p>\n<p>ちなみに私の C 言語レベルは<a href=\"https://amzn.to/35Nc5Bn\">詳説 C ポインタ</a>を読んで理解したというレベルです。</p>\n<h1>Repository</h1>\n<p><a href=\"https://github.com/mit-pdos/xv6-riscv\">github.com/mit-pdos/xv6-riscv</a></p>\n<p>(<a href=\"https://github.com/mit-pdos/xv6-public\">github.com/mit-pdos/xv6-public</a>はもうメンテナンスされていないらしいです。)</p>\n<h2>ls</h2>\n<p><a href=\"https://github.com/mit-pdos/xv6-riscv/blob/riscv/user/ls.c\">対象コード</a></p>\n<h2>Reading</h2>\n<h3>main function</h3>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span>\n<span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> *argv[])</span>\n</span>{\n  <span class=\"hljs-keyword\">int</span> i;\n\n  <span class=\"hljs-keyword\">if</span>(argc &#x3C; <span class=\"hljs-number\">2</span>){\n    ls(<span class=\"hljs-string\">\".\"</span>);\n    <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n  }\n  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span>; i&#x3C;argc; i++)\n    ls(argv[i]);\n  <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n}</code></pre>\n<p>main 関数はシンプルです。</p>\n<p>コマンドの引数がない場合、ls 関数の引数として current directory を渡します。</p>\n<p>コマンドの引数がある場合、順番に ls 関数の引数としてコマンドの引数を渡します。</p>\n<h2>ls function</h2>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span>\n<span class=\"hljs-title\">ls</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *path)</span>\n</span>{\n  <span class=\"hljs-keyword\">char</span> buf[<span class=\"hljs-number\">512</span>], *p;\n  <span class=\"hljs-keyword\">int</span> fd;\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">dirent</span> <span class=\"hljs-title\">de</span>;</span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">stat</span> <span class=\"hljs-title\">st</span>;</span>\n\n  <span class=\"hljs-comment\">// #1</span>\n  <span class=\"hljs-keyword\">if</span>((fd = open(path, <span class=\"hljs-number\">0</span>)) &#x3C; <span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"ls: cannot open %s\\n\"</span>, path);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-comment\">// #2</span>\n  <span class=\"hljs-keyword\">if</span>(fstat(fd, &#x26;st) &#x3C; <span class=\"hljs-number\">0</span>){\n    <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"ls: cannot stat %s\\n\"</span>, path);\n    close(fd);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-comment\">// #3</span>\n  <span class=\"hljs-keyword\">switch</span>(st.type){\n  <span class=\"hljs-keyword\">case</span> T_FILE:\n    <span class=\"hljs-comment\">// #4</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d %d %l\\n\"</span>, fmtname(path), st.type, st.ino, st.size);\n    <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">case</span> T_DIR:\n    <span class=\"hljs-comment\">// #5</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(path) + <span class=\"hljs-number\">1</span> + DIRSIZ + <span class=\"hljs-number\">1</span> > <span class=\"hljs-keyword\">sizeof</span> buf){\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"ls: path too long\\n\"</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-built_in\">strcpy</span>(buf, path);\n    p = buf+<span class=\"hljs-built_in\">strlen</span>(buf);\n    *p++ = <span class=\"hljs-string\">'/'</span>;\n    <span class=\"hljs-comment\">// #6</span>\n    <span class=\"hljs-keyword\">while</span>(read(fd, &#x26;de, <span class=\"hljs-keyword\">sizeof</span>(de)) == <span class=\"hljs-keyword\">sizeof</span>(de)){\n      <span class=\"hljs-keyword\">if</span>(de.inum == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">continue</span>;\n      memmove(p, de.name, DIRSIZ);\n      p[DIRSIZ] = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">if</span>(stat(buf, &#x26;st) &#x3C; <span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"ls: cannot stat %s\\n\"</span>, buf);\n        <span class=\"hljs-keyword\">continue</span>;\n      }\n      <span class=\"hljs-comment\">// #7</span>\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d %d %d\\n\"</span>, fmtname(buf), st.type, st.ino, st.size);\n    }\n    <span class=\"hljs-keyword\">break</span>;\n  }\n  close(fd);\n}</code></pre>\n<p>流れはざっとこんなもん</p>\n<ul>\n<li>\n<p>#1 パスをオープン</p>\n</li>\n<li>\n<p>#2 パスの情報取得</p>\n</li>\n<li>\n<p>#3 パスのタイプによって分岐</p>\n</li>\n<li>\n<p>#4 ファイルであれば、出力</p>\n</li>\n<li>\n<p>#5 ディレクトリの場合</p>\n</li>\n<li>\n<p>#6 ディレクトリ内のファイルをあるだけ読み込む</p>\n</li>\n<li>\n<p>#7 出力</p>\n</li>\n</ul>\n<h1>Rewrite</h1>\n<p>すべて自作の関数のため、一つ一つ見ていくのは時間がかかるので c11 で書き直してみました。</p>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ls</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *path)</span> </span>{\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">stat</span> <span class=\"hljs-title\">st</span>;</span>\n\n  <span class=\"hljs-keyword\">if</span> (stat(path, &#x26;st) &#x3C; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"ls: cannot stat %s\\n\"</span>, path);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">if</span> (S_ISREG(st.st_mode)) {\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d %lu %ld\\n\"</span>, fmtname(path), st.st_mode, st.st_ino, st.st_size);\n  }\n\n  <span class=\"hljs-comment\">// #1</span>\n  <span class=\"hljs-keyword\">if</span> (S_ISDIR(st.st_mode)) {\n    <span class=\"hljs-keyword\">char</span> buf[<span class=\"hljs-number\">512</span>];\n    <span class=\"hljs-comment\">// #2</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strlen</span>(path) + <span class=\"hljs-number\">1</span> + DIRSIZ + <span class=\"hljs-number\">1</span> > <span class=\"hljs-keyword\">sizeof</span> buf) {\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"ls: path too long\\n\"</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// #3</span>\n    <span class=\"hljs-built_in\">strcpy</span>(buf, path);\n    <span class=\"hljs-keyword\">char</span> *p = buf + <span class=\"hljs-built_in\">strlen</span>(buf);\n    *p++ = <span class=\"hljs-string\">'/'</span>;\n\n    <span class=\"hljs-comment\">// #4</span>\n    DIR *dir = opendir(path);\n    <span class=\"hljs-keyword\">for</span> (struct dirent *de = readdir(dir); de != <span class=\"hljs-literal\">NULL</span>; de = readdir(dir)) {\n      <span class=\"hljs-comment\">// #5</span>\n      memmove(p, de->d_name, DIRSIZ);\n      p[DIRSIZ] = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">if</span> (stat(buf, &#x26;st) &#x3C; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"ls: cannot stat %s\\n\"</span>, buf);\n        <span class=\"hljs-keyword\">continue</span>;\n      }\n      <span class=\"hljs-comment\">// #6</span>\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d %lu %ld\\n\"</span>, fmtname(buf), st.st_mode, st.st_ino,\n             st.st_size);\n    }\n  }\n}</code></pre>\n<p>やはり、少し短くなってる！</p>\n<p>多分もう少し短く書けると思います。(fmtname 関数はそのまま使用)</p>\n<ul>\n<li>\n<p>#1 のディレクトリを対象とした処理はいつもほぼ c を読んでいないためかなり手こずりました</p>\n</li>\n<li>\n<p>#2 ここは普段可変長の配列を使っているとほとんど意識しないような処理</p>\n<ul>\n<li>malloc とかで動的に長さを設定できるようにしても良いかもしれない</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strlen</span>(path) + <span class=\"hljs-number\">1</span> + DIRSIZ + <span class=\"hljs-number\">1</span> > <span class=\"hljs-keyword\">sizeof</span> buf) {\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"ls: path too long\\n\"</span>);\n  <span class=\"hljs-keyword\">return</span>;\n}</code></pre>\n<ul>\n<li>#3 こういう配列をポインタで操作してくのは久しぶりに c やるとよくわかんなくなるなあ\n<ul>\n<li>buf はディレクトリとファイル名を<code>/</code>でつなげたものを格納する場所</li>\n<li>p は格納していく際に一番後ろのメモリの位置を指すカーソルとして使用する</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-built_in\">strcpy</span>(buf, path);\n<span class=\"hljs-keyword\">char</span> *p = buf + <span class=\"hljs-built_in\">strlen</span>(buf);\n*p++ = <span class=\"hljs-string\">'/'</span>;</code></pre>\n<ul>\n<li>#4 directory のなかのファイルを一覧していく</li>\n</ul>\n<pre><code class=\"hljs language-c\">DIR *dir = opendir(path);\n<span class=\"hljs-keyword\">for</span> (struct dirent *de = readdir(dir); de != <span class=\"hljs-literal\">NULL</span>; de = readdir(dir)) {</code></pre>\n<ul>\n<li>#5 p にファイル名をコピーして、終端 null 文字を最後に入れる(<code>'\\0'</code>を入れるのと同じ)</li>\n</ul>\n<pre><code class=\"hljs language-c\">memmove(p, de->d_name, DIRSIZ);\np[DIRSIZ] = <span class=\"hljs-number\">0</span>;</code></pre>\n<ul>\n<li>#6 出力\n<ul>\n<li>verb の数が多すぎて大変だなあ</li>\n<li>go は楽で良い</li>\n<li>使いたいときだけ複雑なものを使用すれば良いから</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-c\"><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d %lu %ld\\n\"</span>, fmtname(buf), st.st_mode, st.st_ino,\n       st.st_size);</code></pre>\n<h2>Conclusion</h2>\n<p>久しぶりに c のコードを読んだけど時間かかりました。。。</p>\n<p>やってることは単純だけどポインタの動きを追いながら読むのは勉強になります。</p>\n<p>ただ、書き直すのを毎日やるのはちょっともう無理かもです。</p>\n<p>次は Go か Python にしとこうかな。</p>\n","title":"xv6 - ls","date":"2021-01-16","description":"今日は最初ということで教育用のlinuxのlsを読みます。"}},"__N_SSG":true}