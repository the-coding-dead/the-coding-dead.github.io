{"pageProps":{"postData":{"id":"xv6-ls","code":"int main(int argc, char *argv[]) {\n  if (argc < 2) {\n    ls(\".\");\n    exit(0);\n  }\n\n  for (int i = 1; i < argc; i++)\n    ls(argv[i]);\n\n  exit(0);\n}\n","language":"c","contentHtml":"<p>最初っぽいので ls にしました。</p>\n<p>GNU とか BSD のは記述量とか多そうだったので教育用に作られた Linux である<a href=\"https://pdos.csail.mit.edu/6.828/2012/xv6.html\">xv6</a>のなかの ls を読んでみます。</p>\n<p>ちなみに私の C 言語のレベルは<a href=\"https://amzn.to/35Nc5Bn\">詳説 C ポインタ</a>を読んで理解したというレベルです。読めるけど書けないというやつです。</p>\n<h1>Repository</h1>\n<p><a href=\"https://github.com/mit-pdos/xv6-riscv\">github.com/mit-pdos/xv6-riscv</a></p>\n<p>ちなみに</p>\n<p><a href=\"https://github.com/mit-pdos/xv6-public\">github.com/mit-pdos/xv6-public</a>はもうメンテナンスされていないらしいです。</p>\n<h2>ls</h2>\n<p>コード: <a href=\"https://github.com/mit-pdos/xv6-riscv/blob/riscv/user/ls.c\">ls.c</a></p>\n<h2>Reading</h2>\n<h3>main function</h3>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ls</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&#x3C;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">ls</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>main 関数はシンプルです。</p>\n<p>コマンドの引数がない場合、ls 関数の引数として current directory を渡します。</p>\n<p>コマンドの引数がある場合、順番に ls 関数の引数としてコマンドの引数を渡します。</p>\n<h2>ls function</h2>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">ls</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span> de<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ls: cannot open %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fstat</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>st<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ls: cannot stat %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> T_FILE<span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 4</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %d %l\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fmtname</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>ino<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">case</span> T_DIR<span class=\"token operator\">:</span>\n    <span class=\"token comment\">// 5</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> DIRSIZ <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token keyword\">sizeof</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls: path too long\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> buf<span class=\"token operator\">+</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 6</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>de<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>de<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>de<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>de<span class=\"token punctuation\">.</span>inum <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> de<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> DIRSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token punctuation\">[</span>DIRSIZ<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>st<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls: cannot stat %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 7</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %d %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fmtname</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>ino<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>流れはざっとこんなもん</p>\n<ul>\n<li>1 パスをオープン</li>\n<li>2 パスの情報取得</li>\n<li>3 パスのタイプによって分岐</li>\n<li>4 ファイルであれば、出力</li>\n<li>5 ディレクトリの場合</li>\n<li>6 ディレクトリ内のファイルをあるだけ読み込む</li>\n<li>7 出力</li>\n</ul>\n<h1>Rewrite</h1>\n<p>すべて自作の関数のため、一つ一つ見ていくのは時間がかかるので C11 で書き直してみました。</p>\n<p>コード: <a href=\"https://github.com/the-coding-dead/code/blob/main/xv6-ls/myls.c\">myls</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">ls</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>st<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls: cannot stat %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">S_ISREG</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %lu %ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fmtname</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_ino<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 1</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">S_ISDIR</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> DIRSIZ <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token keyword\">sizeof</span> buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls: path too long\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 3</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> buf <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 4</span>\n    DIR <span class=\"token operator\">*</span>dir <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span> <span class=\"token operator\">*</span>de <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> de <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> de <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 5</span>\n      <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> de<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">,</span> DIRSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token punctuation\">[</span>DIRSIZ<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span>st<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls: cannot stat %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 6</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %lu %ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fmtname</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_ino<span class=\"token punctuation\">,</span>\n             st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>やはり、少し短くなってる！</p>\n<p>多分もう少し短く書けると思います。(fmtname 関数はそのまま使用)</p>\n<ul>\n<li>\n<p>1 のディレクトリを対象とした処理はいつもほぼ C を読んでいないためかなり手こずりました</p>\n</li>\n<li>\n<p>2 ここは普段可変長の配列を使っているとほとんど意識しないような処理</p>\n<ul>\n<li>malloc とかで動的に長さを設定できるようにしても良いかもしれない</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> DIRSIZ <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token keyword\">sizeof</span> buf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ls: path too long\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>3 こういう配列をポインタで操作してくのは久しぶりに C やるとよくわかんなくなるなあ\n<ul>\n<li>buf はディレクトリとファイル名を<code>/</code>でつなげたものを格納する場所</li>\n<li>p は格納していく際に一番後ろのメモリの位置を指すカーソルとして使用する</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> buf <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>p<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>4 directory のなかのファイルを一覧していく</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\">DIR <span class=\"token operator\">*</span>dir <span class=\"token operator\">=</span> <span class=\"token function\">opendir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dirent</span> <span class=\"token operator\">*</span>de <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> de <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> de <span class=\"token operator\">=</span> <span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</code></pre></div>\n<ul>\n<li>5 p にファイル名をコピーして、終端 null 文字を最後に入れる(<code>'\\0'</code>を入れるのと同じ)</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> de<span class=\"token operator\">-></span>d_name<span class=\"token punctuation\">,</span> DIRSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">[</span>DIRSIZ<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n<li>6 出力\n<ul>\n<li>verb の数が多すぎて大変だなあ</li>\n<li>go は楽で良い</li>\n<li>使いたいときだけ複雑なものを使用すれば良いから</li>\n</ul>\n</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %d %lu %ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fmtname</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_mode<span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_ino<span class=\"token punctuation\">,</span>\n       st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>Conclusion</h2>\n<p>久しぶりに C のコードを読んだけど時間かかりました。。。</p>\n<p>やってることは単純だけどポインタの動きを追いながら読むのは勉強になります。</p>\n<p>ただ、書き直すのを毎日やるのはちょっともう無理かもです。</p>\n<p>次は Go か Python にしとこうかな。</p>\n","title":"xv6 - ls","date":"2021-01-16","description":"今日は最初ということで教育用のlinuxのlsを読みます。"}},"__N_SSG":true}