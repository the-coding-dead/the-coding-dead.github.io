{"pageProps":{"postData":{"id":"httprouter3","code":"func main() {\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/hello/:name\", Hello)\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n","language":"go","contentHtml":"<p>今回も引き続きGoの<a href=\"https://github.com/julienschmidt/httprouter\">julienschmidt/httprouter</a>を読んでいきます！</p>\n<h1>Review</h1>\n<p>前回の復習</p>\n<p><code>*node.insertChild</code>内で<code>Named paramters</code>と<code>Catch-All parameters</code>をどのように処理するのかを確認していきました。</p>\n<p>今回は呼び出し元の<code>*node.addRoute</code>に戻って処理を読み進めていきます。</p>\n<h1>Reading</h1>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfullPath <span class=\"token operator\">:=</span> path\n\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t<span class=\"token comment\">// Empty tree</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">=</span> root\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\nwalk<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Find the longest common prefix.</span>\n\t\t<span class=\"token comment\">// This also implies that the common prefix contains no ':' or '*'</span>\n\t\t<span class=\"token comment\">// since the existing key can't contain those chars.</span>\n\t\ti <span class=\"token operator\">:=</span> <span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// Split edge</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tchild <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">{</span>\n\t\t\t\tpath<span class=\"token punctuation\">:</span>      n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\twildChild<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">.</span>wildChild<span class=\"token punctuation\">,</span>\n\t\t\t\tnType<span class=\"token punctuation\">:</span>     static<span class=\"token punctuation\">,</span>\n\t\t\t\tindices<span class=\"token punctuation\">:</span>   n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">,</span>\n\t\t\t\tchildren<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n\t\t\t\thandle<span class=\"token punctuation\">:</span>    n<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n\t\t\t\tpriority<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span><span class=\"token operator\">&#x26;</span>child<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n\t\t\tn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\tn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n\t\t\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t\tn<span class=\"token punctuation\">.</span>wildChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Make new node a child of this node</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>wildChild <span class=\"token punctuation\">{</span>\n\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t\t\t\t<span class=\"token comment\">// Check if the wildcard matches</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span>\n\t\t\t\t\t<span class=\"token comment\">// Adding a child to a catchAll is not possible</span>\n\t\t\t\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token operator\">&#x26;&#x26;</span>\n\t\t\t\t\t<span class=\"token comment\">// Check for longer wildcard, e.g. :name and :names</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// Wildcard conflict</span>\n\t\t\t\t\tpathSeg <span class=\"token operator\">:=</span> path\n\t\t\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tpathSeg <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitN</span><span class=\"token punctuation\">(</span>pathSeg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\tprefix <span class=\"token operator\">:=</span> fullPath<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">,</span> pathSeg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path\n\t\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span> <span class=\"token operator\">+</span> pathSeg <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' in new path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' conflicts with existing wildcard '\"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' in existing prefix '\"</span> <span class=\"token operator\">+</span> prefix <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tidxc <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n\t\t\t<span class=\"token comment\">// '/' after param</span>\n\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">==</span> param <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Check if a child with the next path byte exists</span>\n\t\t\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> idxc <span class=\"token punctuation\">{</span>\n\t\t\t\t\ti <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Otherwise insert it</span>\n\t\t\t<span class=\"token keyword\">if</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">':'</span> <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>idxc<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\tn <span class=\"token operator\">=</span> child\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Otherwise add handle to current node</span>\n\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a handle is already registered for path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfullPath <span class=\"token operator\">:=</span> path\n\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t<span class=\"token comment\">// Empty tree</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">=</span> root\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>で前回は終わりました。</p>\n<p>空のtreeではないときの処理である、以降コードを見ていきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\">walk<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Find the longest common prefix.</span>\n\t\t<span class=\"token comment\">// This also implies that the common prefix contains no ':' or '*'</span>\n\t\t<span class=\"token comment\">// since the existing key can't contain those chars.</span>\n\t\ti <span class=\"token operator\">:=</span> <span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><code>/foo/bar/</code>と<code>/foo/baz/</code>の共通prefix<code>/foo/</code>のインデックスを取得する処理です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Split edge</span>\n<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  child <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span>      n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    wildChild<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">.</span>wildChild<span class=\"token punctuation\">,</span>\n    nType<span class=\"token punctuation\">:</span>     static<span class=\"token punctuation\">,</span>\n    indices<span class=\"token punctuation\">:</span>   n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n    handle<span class=\"token punctuation\">:</span>    n<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n    priority<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  n<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span><span class=\"token operator\">&#x26;</span>child<span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n  n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n  n<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n  n<span class=\"token punctuation\">.</span>wildChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>インデックスがノードのパスより短いとき、つまり</p>\n<p><code>/foo/bar/baz</code>のようなノードに<code>/foo/bar</code>を追加するようなときの処理です。</p>\n<p>単純に現在のノードの子ノードに割り込む形で登録しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Make new node a child of this node</span>\n<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>wildChild <span class=\"token punctuation\">{</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    n<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n    <span class=\"token comment\">// Check if the wildcard matches</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span>\n      <span class=\"token comment\">// Adding a child to a catchAll is not possible</span>\n      n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token operator\">&#x26;&#x26;</span>\n      <span class=\"token comment\">// Check for longer wildcard, e.g. :name and :names</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span> walk\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Wildcard conflict</span>\n      pathSeg <span class=\"token operator\">:=</span> path\n      <span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token punctuation\">{</span>\n        pathSeg <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitN</span><span class=\"token punctuation\">(</span>pathSeg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n      prefix <span class=\"token operator\">:=</span> fullPath<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">,</span> pathSeg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path\n      <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span> <span class=\"token operator\">+</span> pathSeg <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"' in new path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"' conflicts with existing wildcard '\"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"' in existing prefix '\"</span> <span class=\"token operator\">+</span> prefix <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>今度は逆で</p>\n<p><code>/foo/bar</code>のようなノードに<code>/foo/bar/baz</code>を追加するようなときの処理です。</p>\n<p><code>if n.wildChild { ... }</code> でワイルドカードのチェックをしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\">idxc <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// '/' after param</span>\n<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">==</span> param <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n  n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  n<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n  <span class=\"token keyword\">continue</span> walk\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Check if a child with the next path byte exists</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> idxc <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">continue</span> walk\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Otherwise insert it</span>\n<span class=\"token keyword\">if</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">':'</span> <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n  n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>idxc<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  child <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  n<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span>\n  n<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  n <span class=\"token operator\">=</span> child\n<span class=\"token punctuation\">}</span>\nn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// '/' after param</span>\n<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">==</span> param <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n  n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  n<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n  <span class=\"token keyword\">continue</span> walk\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>パラメータの直後だった場合は、現在ノードの子ノードを現在ノードとして、再度ループを回します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Check if a child with the next path byte exists</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> idxc <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">continue</span> walk\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>子ノードにパスの最初の文字と同じ文字を持つ子が存在するかどうかのチェックしています。</p>\n<p>同じ場合は、その子ノードを現在のノードとして再度無限ループに戻ります</p>\n<p>なぜ<code>n.indices</code>ループしているかというと</p>\n<p>直後で子要素が複数ある場合はそれらを結合して保存しているためです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Otherwise insert it</span>\n<span class=\"token keyword\">if</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">':'</span> <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n  n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>idxc<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  child <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  n<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span>\n  n<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  n <span class=\"token operator\">=</span> child\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Otherwise add handle to current node</span>\n<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a handle is already registered for path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n<span class=\"token keyword\">return</span>\n</code></pre></div>\n<p>上記に該当しなければ、現在のノードに子ノードを追加し、<code>Handle</code>をノードに登録して終了です。</p>\n<p>どうやって階層構造を作っているのかが全て理解できました！</p>\n<p>では最後に<code>Handle</code>とパスの階層構造をもつ<code>*Router</code>を呼び出すかを確認していきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>PanicHandler <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">defer</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tpath <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path\n\n\t<span class=\"token keyword\">if</span> root <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> root <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> handle<span class=\"token punctuation\">,</span> ps<span class=\"token punctuation\">,</span> tsr <span class=\"token operator\">:=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>getParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> handle <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> ps <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span>\n\t\t\t\tr<span class=\"token punctuation\">.</span><span class=\"token function\">putParams</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">!=</span> http<span class=\"token punctuation\">.</span>MethodConnect <span class=\"token operator\">&#x26;&#x26;</span> path <span class=\"token operator\">!=</span> <span class=\"token string\">\"/\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Moved Permanently, request with GET method</span>\n\t\t\tcode <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span>StatusMovedPermanently\n\t\t\t<span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">!=</span> http<span class=\"token punctuation\">.</span>MethodGet <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// Permanent Redirect, request with same method</span>\n\t\t\t\tcode <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>StatusPermanentRedirect\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> tsr <span class=\"token operator\">&#x26;&#x26;</span> r<span class=\"token punctuation\">.</span>RedirectTrailingSlash <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x26;&#x26;</span> path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\treq<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\treq<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">=</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Try to fix the request path</span>\n\t\t\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>RedirectFixedPath <span class=\"token punctuation\">{</span>\n\t\t\t\tfixedPath<span class=\"token punctuation\">,</span> found <span class=\"token operator\">:=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">findCaseInsensitivePath</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token function\">CleanPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\tr<span class=\"token punctuation\">.</span>RedirectTrailingSlash<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> found <span class=\"token punctuation\">{</span>\n\t\t\t\t\treq<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path <span class=\"token operator\">=</span> fixedPath\n\t\t\t\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Redirect</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">==</span> http<span class=\"token punctuation\">.</span>MethodOptions <span class=\"token operator\">&#x26;&#x26;</span> r<span class=\"token punctuation\">.</span>HandleOPTIONS <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Handle OPTIONS requests</span>\n\t\t<span class=\"token keyword\">if</span> allow <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">allowed</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>MethodOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> allow <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span> allow<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>GlobalOPTIONS <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tr<span class=\"token punctuation\">.</span>GlobalOPTIONS<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>HandleMethodNotAllowed <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Handle 405</span>\n\t\t<span class=\"token keyword\">if</span> allow <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">allowed</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> allow <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span> allow<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>MethodNotAllowed <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tr<span class=\"token punctuation\">.</span>MethodNotAllowed<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>\n\t\t\t\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">StatusText</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>StatusMethodNotAllowed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\thttp<span class=\"token punctuation\">.</span>StatusMethodNotAllowed<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Handle 404</span>\n\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>NotFound <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tr<span class=\"token punctuation\">.</span>NotFound<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>こっちはかなり読みやすいです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>PanicHandler <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">defer</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\npath <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path\n\n<span class=\"token keyword\">if</span> root <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> root <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">==</span> http<span class=\"token punctuation\">.</span>MethodOptions <span class=\"token operator\">&#x26;&#x26;</span> r<span class=\"token punctuation\">.</span>HandleOPTIONS <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>HandleMethodNotAllowed <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Handle 404</span>\n<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>NotFound <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  r<span class=\"token punctuation\">.</span>NotFound<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  http<span class=\"token punctuation\">.</span><span class=\"token function\">NotFound</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>リクエストで受け取った<code>HTTPメソッド</code>が登録されておらず、</p>\n<p><code>OPTIONS</code>でも<code>OPTIONS</code>設定が有効出ない場合は、</p>\n<p><code>404</code>を返却します。</p>\n<p>では下記を見ていきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> root <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> root <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> handle<span class=\"token punctuation\">,</span> ps<span class=\"token punctuation\">,</span> tsr <span class=\"token operator\">:=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>getParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> handle <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> ps <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ps<span class=\"token punctuation\">)</span>\n      r<span class=\"token punctuation\">.</span><span class=\"token function\">putParams</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span>\n</code></pre></div>\n<p><code>*node.getValue</code>にすべて詰まっているようです。</p>\n<p>今回はここまでにして、次回<code>*node.getValue</code>を見ます。</p>\n<p>次回でラストにしよう。</p>\n<h1>Conclusion</h1>\n<p>ノードと子ノードの階層を作っている<code>*node.addRoute</code>を見てきました。</p>\n<p>正直、自分でかんたんなものを作ってみないと完全には理解できないような気がします。</p>\n<p>次回で絶対に終わらせたい！最初の方に扱う題材としては良かったのかなあ。</p>\n<p>以上です。</p>\n","title":"httprouter3","date":"2021-01-25","description":"3回目！httprouterです。","serialization":["httprouter","httprouter2","httprouter3"]}},"__N_SSG":true}