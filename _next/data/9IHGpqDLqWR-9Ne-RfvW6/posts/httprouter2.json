{"pageProps":{"postData":{"id":"httprouter2","code":"func main() {\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/hello/:name\", Hello)\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n","language":"go","contentHtml":"<p>前回から引き続き Go の<a href=\"https://github.com/julienschmidt/httprouter\">julienschmidt/httprouter</a>を読んでいきます！</p>\n<h1>Repository</h1>\n<p><a href=\"https://github.com/julienschmidt/httprouter\">github.com/julienschmidt/httprouter</a></p>\n<h2>router.go</h2>\n<p>コード: <a href=\"https://github.com/julienschmidt/httprouter/blob/master/router.go\">router.go</a></p>\n<h1>Review</h1>\n<p>前回の復習</p>\n<p>httprouter の処理の流れは</p>\n<ol>\n<li>HTTP リクエストごとにパスを管理</li>\n<li>パスと実行したいハンドラをツリー構造で管理</li>\n</ol>\n<p>だとわかりました。</p>\n<p>パスと<code>Handle</code>を紐付けるときに呼ばれるのが<code>*Router.Handle</code>で</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n\troot<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>その内部で呼ばれるのが<code>*node.addRoute</code>でした。</p>\n<p>今日はこの中を見ることで</p>\n<ol start=\"2\">\n<li>パスと実行したいハンドラをツリー構造で管理</li>\n</ol>\n<p>する方法を理解していきます。</p>\n<h1>Reading</h1>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfullPath <span class=\"token operator\">:=</span> path\n\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t<span class=\"token comment\">// Empty tree</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">=</span> root\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\nwalk<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Find the longest common prefix.</span>\n\t\t<span class=\"token comment\">// This also implies that the common prefix contains no ':' or '*'</span>\n\t\t<span class=\"token comment\">// since the existing key can't contain those chars.</span>\n\t\ti <span class=\"token operator\">:=</span> <span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// Split edge</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tchild <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">{</span>\n\t\t\t\tpath<span class=\"token punctuation\">:</span>      n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\twildChild<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">.</span>wildChild<span class=\"token punctuation\">,</span>\n\t\t\t\tnType<span class=\"token punctuation\">:</span>     static<span class=\"token punctuation\">,</span>\n\t\t\t\tindices<span class=\"token punctuation\">:</span>   n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">,</span>\n\t\t\t\tchildren<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n\t\t\t\thandle<span class=\"token punctuation\">:</span>    n<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n\t\t\t\tpriority<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span><span class=\"token operator\">&#x26;</span>child<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n\t\t\tn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\tn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n\t\t\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t\tn<span class=\"token punctuation\">.</span>wildChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Make new node a child of this node</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>wildChild <span class=\"token punctuation\">{</span>\n\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t\t\t\t<span class=\"token comment\">// Check if the wildcard matches</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span>\n\t\t\t\t\t<span class=\"token comment\">// Adding a child to a catchAll is not possible</span>\n\t\t\t\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token operator\">&#x26;&#x26;</span>\n\t\t\t\t\t<span class=\"token comment\">// Check for longer wildcard, e.g. :name and :names</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// Wildcard conflict</span>\n\t\t\t\t\tpathSeg <span class=\"token operator\">:=</span> path\n\t\t\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tpathSeg <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitN</span><span class=\"token punctuation\">(</span>pathSeg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\tprefix <span class=\"token operator\">:=</span> fullPath<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">,</span> pathSeg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path\n\t\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span> <span class=\"token operator\">+</span> pathSeg <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' in new path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' conflicts with existing wildcard '\"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' in existing prefix '\"</span> <span class=\"token operator\">+</span> prefix <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tidxc <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n\t\t\t<span class=\"token comment\">// '/' after param</span>\n\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">==</span> param <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Check if a child with the next path byte exists</span>\n\t\t\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> idxc <span class=\"token punctuation\">{</span>\n\t\t\t\t\ti <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Otherwise insert it</span>\n\t\t\t<span class=\"token keyword\">if</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">':'</span> <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>idxc<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\tn <span class=\"token operator\">=</span> child\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Otherwise add handle to current node</span>\n\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a handle is already registered for path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>まず、<code>*node</code>がまっさらの状態で<code>*node.addRoute</code>が呼ばれたときの処理を見ます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfullPath <span class=\"token operator\">:=</span> path\n\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t<span class=\"token comment\">// Empty tree</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">=</span> root\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここまでで良さそうです。</p>\n<p><code>*node.priority</code>が何に使われるのかはちょっとまだわからないので無視して進みます。</p>\n<p><code>*node.insertChild</code>を見てみましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Find prefix until first wildcard</span>\n\t\twildcard<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token operator\">:=</span> <span class=\"token function\">findWildcard</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// No wilcard found</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// The wildcard name must not contain ':' and '*'</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>valid <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only one wildcard per path segment is allowed, has: '\"</span> <span class=\"token operator\">+</span>\n\t\t\t\twildcard <span class=\"token operator\">+</span> <span class=\"token string\">\"' in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Check if the wildcard has a name</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wildcards must be named with a non-empty name in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Check if this node has existing children which would be</span>\n\t\t<span class=\"token comment\">// unreachable if we insert the wildcard here</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wildcard segment '\"</span> <span class=\"token operator\">+</span> wildcard <span class=\"token operator\">+</span>\n\t\t\t\t<span class=\"token string\">\"' conflicts with existing children in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// param</span>\n\t\t<span class=\"token keyword\">if</span> wildcard<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">':'</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// Insert prefix before the current wildcard</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n\t\t\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tn<span class=\"token punctuation\">.</span>wildChild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\t\t\t\tnType<span class=\"token punctuation\">:</span> param<span class=\"token punctuation\">,</span>\n\t\t\t\tpath<span class=\"token punctuation\">:</span>  wildcard<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\n\t\t\tn <span class=\"token operator\">=</span> child\n\t\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t\t\t<span class=\"token comment\">// If the path doesn't end with the wildcard, then there</span>\n\t\t\t<span class=\"token comment\">// will be another non-wildcard subpath starting with '/'</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\t\t\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\t\t\t\t\tpriority<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\n\t\t\t\tn <span class=\"token operator\">=</span> child\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Otherwise we're done. Insert the handle in the new leaf</span>\n\t\t\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// catchAll</span>\n\t\t<span class=\"token keyword\">if</span> i<span class=\"token operator\">+</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch-all routes are only allowed at the end of the path in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch-all conflicts with existing handle for the path segment root in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Currently fixed width 1 for '/'</span>\n\t\ti<span class=\"token operator\">--</span>\n\t\t<span class=\"token keyword\">if</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no / before catch-all in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n\n\t\t<span class=\"token comment\">// First node: catchAll node with empty path</span>\n\t\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\t\t\twildChild<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t\tnType<span class=\"token punctuation\">:</span>     catchAll<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n\t\tn <span class=\"token operator\">=</span> child\n\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t\t<span class=\"token comment\">// Second node: node holding the variable</span>\n\t\tchild <span class=\"token operator\">=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\t\t\tpath<span class=\"token punctuation\">:</span>     path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\tnType<span class=\"token punctuation\">:</span>    catchAll<span class=\"token punctuation\">,</span>\n\t\t\thandle<span class=\"token punctuation\">:</span>   handle<span class=\"token punctuation\">,</span>\n\t\t\tpriority<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// If no wildcard was found, simply insert the path and handle</span>\n\tn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path\n\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これも長い。。。</p>\n<p>丁寧に読んでいきます。</p>\n<p>無限ループの直後</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Find prefix until first wildcard</span>\nwildcard<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token operator\">:=</span> <span class=\"token function\">findWildcard</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>最初のワイルドカードまでを取得しています。</p>\n<p>ワイルドカードとは<code>:</code>と<code>*</code>ではじまるセグメントです。</p>\n<p><code>:</code>は前回、<code>Named parameters</code>と紹介しましたが、<code>*</code>で始まるものは<code>Catch-All parameters</code>というものです。</p>\n<p>下記のようにマッチします。(<a href=\"https://github.com/julienschmidt/httprouter#catch-all-parameters\">README 参照</a>)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Pattern: /src/*filepath\n\n /src/                     match\n /src/somefile.go          match\n /src/subdir/somefile.go   match</code></pre></div>\n<p>では、<code>findWildcard</code>を読んでいきます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Search for a wildcard segment and check the name for invalid characters.</span>\n<span class=\"token comment\">// Returns -1 as index, if no wildcard was found.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">findWildcard</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>wilcard <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> i <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> valid <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Find start</span>\n\t<span class=\"token comment\">// 1</span>\n\t<span class=\"token keyword\">for</span> start<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 2</span>\n\t\t<span class=\"token comment\">// A wildcard starts with ':' (param) or '*' (catch-all)</span>\n\t\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">!=</span> <span class=\"token string\">':'</span> <span class=\"token operator\">&#x26;&#x26;</span> c <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 3</span>\n\t\t<span class=\"token comment\">// Find end and check for invalid characters</span>\n\t\tvalid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t<span class=\"token keyword\">for</span> end<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>start<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">switch</span> c <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> path<span class=\"token punctuation\">[</span>start <span class=\"token punctuation\">:</span> start<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> valid\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">:</span>\n\t\t\t\tvalid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> path<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> valid\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>非常にシンプルです。</p>\n<ol>\n<li>パスを一文字ずつループして</li>\n<li>ワイルドカードじゃなかったら次</li>\n<li>ワイルドカードが何なのか調べて、ついでにワイルドカードの文法エラーをチェック</li>\n</ol>\n<p>という感じです。</p>\n<p>返却値は</p>\n<p>ワイルドカード、ワイルドカードのインデックス、文法エラーがないか</p>\n<p>です。</p>\n<p>ここで初めて気づいたのですが、</p>\n<p><a href=\"https://github.com/julienschmidt/httprouter\">julienschmidt/httprouter</a>は</p>\n<p><a href=\"https://tour.golang.org/basics/7\"><code>Named return values</code></a>を多用しています。</p>\n<p>基本的に使うべきでないと思っていたので使用を避けていましたが、ドキュメントとしての効力がめちゃくちゃ高いなと思いました。</p>\n<ul>\n<li>複数の返却値を返す</li>\n<li>返却値が関数名から読み取れない</li>\n<li>関数が割と短い</li>\n</ul>\n<p>場合は使っていこうと思います。</p>\n<p>では、<code>*node.insertChild</code>に戻ります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Find prefix until first wildcard</span>\n\t\twildcard<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> valid <span class=\"token operator\">:=</span> <span class=\"token function\">findWildcard</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// No wilcard found</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// The wildcard name must not contain ':' and '*'</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>valid <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only one wildcard per path segment is allowed, has: '\"</span> <span class=\"token operator\">+</span>\n\t\t\t\twildcard <span class=\"token operator\">+</span> <span class=\"token string\">\"' in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Check if the wildcard has a name</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wildcards must be named with a non-empty name in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Check if this node has existing children which would be</span>\n\t\t<span class=\"token comment\">// unreachable if we insert the wildcard here</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wildcard segment '\"</span> <span class=\"token operator\">+</span> wildcard <span class=\"token operator\">+</span>\n\t\t\t\t<span class=\"token string\">\"' conflicts with existing children in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>findWildcard 後<code>if</code>は wildcard がなかった場合にすぐに関数最後に移動します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// If no wildcard was found, simply insert the path and handle</span>\nn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path\nn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n</code></pre></div>\n<p>パスと<code>Handle</code>を紐付けています。</p>\n<p>次の<code>if</code>3 連発はバリデーションですね。</p>\n<p>次に移ります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// param</span>\n<span class=\"token keyword\">if</span> wildcard<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">':'</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Insert prefix before the current wildcard</span>\n\t\tn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tn<span class=\"token punctuation\">.</span>wildChild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\t\tnType<span class=\"token punctuation\">:</span> param<span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span>  wildcard<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\n\tn <span class=\"token operator\">=</span> child\n\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t<span class=\"token comment\">// If the path doesn't end with the wildcard, then there</span>\n\t<span class=\"token comment\">// will be another non-wildcard subpath starting with '/'</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\t\t\tpriority<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\n\t\tn <span class=\"token operator\">=</span> child\n\t\t<span class=\"token keyword\">continue</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Otherwise we're done. Insert the handle in the new leaf</span>\n\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> wildcard<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">':'</span> <span class=\"token punctuation\">{</span>\n</code></pre></div>\n<p>なので<code>Named parameters</code>についてのようです。</p>\n<p>やっていることは単純で、</p>\n<p><code>*node.children</code>に<code>Named parameters</code>として<code>*node</code>を追加し、</p>\n<p><code>/:hoge/huga</code>のように<code>Named parameters</code>の配下にサブパスがある場合はそのサブパスを先程追加した<code>Named paramters</code>の<code>*node</code>の<code>children</code>に追加しています。</p>\n<p><code>/:hoge/huga/:piyo</code>のような場合があるので上記を何度も繰り返します。</p>\n<p>最後に<code>*node</code>に<code>Handle</code>を紐付けています。</p>\n<p>やっと見えてきました。。。</p>\n<p>次行きます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// catchAll</span>\n<span class=\"token keyword\">if</span> i<span class=\"token operator\">+</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>wildcard<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch-all routes are only allowed at the end of the path in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch-all conflicts with existing handle for the path segment root in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Currently fixed width 1 for '/'</span>\ni<span class=\"token operator\">--</span>\n<span class=\"token keyword\">if</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no / before catch-all in path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// First node: catchAll node with empty path</span>\nchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\twildChild<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\tnType<span class=\"token punctuation\">:</span>     catchAll<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\nn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\nn <span class=\"token operator\">=</span> child\nn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n<span class=\"token comment\">// Second node: node holding the variable</span>\nchild <span class=\"token operator\">=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span>\n\tpath<span class=\"token punctuation\">:</span>     path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\tnType<span class=\"token punctuation\">:</span>    catchAll<span class=\"token punctuation\">,</span>\n\thandle<span class=\"token punctuation\">:</span>   handle<span class=\"token punctuation\">,</span>\n\tpriority<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span>child<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span>\n</code></pre></div>\n<p>こちらは<code>Catch-All parameters</code>の処理です。</p>\n<p>バリデーションと<code>Named paramters</code>とほぼ同じ処理があります。</p>\n<p><code>Named paramters</code>と違い、<code>/*hoge/huga</code>のような指定はできないので</p>\n<p>サブパスの処理はないです。</p>\n<p>これでパスと<code>Handle</code>をどのように紐付けているのか、</p>\n<p><code>Named paramters</code>と<code>Catch-All parameters</code>はどのように処理するのかがわかりました。</p>\n<p>とりあえず今回はこのへんにしときます。。。</p>\n<h1>Conclusion</h1>\n<p>今回は主に<code>*node.insertChild</code>について見てきました。</p>\n<p><code>Named paramters</code>と<code>Catch-All parameters</code>をどのように処理するのかは非常に勉強になりました。</p>\n<p>次回は<code>*node.insertChild</code>を呼び出している<code>*node.addRoute</code>に戻って処理を見ていきます。</p>\n<p>今更ですが、<code>*Router.ServeHTTP</code>を先に読んでおけばここまで読んだ文を理解するのがもっと楽だった気がします。。。</p>\n<p>以上です。</p>\n","title":"httprouter2","date":"2021-01-17","description":"前回の続き。httprouterを読みます。","serialization":["httprouter","httprouter2"]}},"__N_SSG":true}