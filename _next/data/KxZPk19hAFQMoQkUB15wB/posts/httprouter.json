{"pageProps":{"postData":{"id":"httprouter","code":"func main() {\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/hello/:name\", Hello)\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n","language":"go","contentHtml":"<p>今日は<a href=\"https://github.com/julienschmidt/httprouter\">julienschmidt/httprouter</a>です。</p>\n<p>たまに雑な API を Go で作るときに使うのでどのように実装されているか気になってました。</p>\n<p>見てみます。</p>\n<h1>Repository</h1>\n<p><a href=\"https://github.com/julienschmidt/httprouter\">github.com/julienschmidt/httprouter</a></p>\n<h1>Package Features - Named parameters</h1>\n<p><a href=\"https://github.com/julienschmidt/httprouter\">httprouter</a>の一番の<code>net/http</code>との違いは<code>Named parameters</code>だと思います。</p>\n<p><code>router.GET(\"/hello/:name\", Hello)</code>と登録することで</p>\n<p><code>httprouter.Params.ByName(\"name\")</code>でパラメータを取得できます。</p>\n<p>まだいっぱい特徴があるのですが、今回はこの機能に絞ってコードを読んでいきます。</p>\n<h2>router.go</h2>\n<p>コード: <a href=\"https://github.com/julienschmidt/httprouter/blob/master/router.go\">router.go</a></p>\n<h1>Reading</h1>\n<p>まず、必ず呼び出すコンストラクタです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// New returns a new initialized Router.</span>\n<span class=\"token comment\">// Path auto-correction, including trailing slashes, is enabled by default.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Router <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&#x26;</span>Router<span class=\"token punctuation\">{</span>\n\t\tRedirectTrailingSlash<span class=\"token punctuation\">:</span>  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tRedirectFixedPath<span class=\"token punctuation\">:</span>      <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tHandleMethodNotAllowed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\tHandleOPTIONS<span class=\"token punctuation\">:</span>          <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>返却される<code>*Router</code>は<code>net/http.Handler</code>インターフェイスを実装しています。</p>\n<p>下記のコードでわかります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Make sure the Router conforms with the http.Handler interface</span>\n<span class=\"token keyword\">var</span> <span class=\"token boolean\">_</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token operator\">=</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><code>net/http</code>の方も読んでみたくなるなあ。また今度にします。</p>\n<p>次に実際にパスに登録するための<code>GET</code>や<code>POST</code>メソッドです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\">router<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello/:name\"</span><span class=\"token punctuation\">,</span> Hello<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>のように使います。</p>\n<p>これは下記のコードです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// GET is a shortcut for router.Handle(http.MethodGet, path, handle)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">GET</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>MethodGet<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// HEAD is a shortcut for router.Handle(http.MethodHead, path, handle)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">HEAD</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>MethodHead<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// OPTIONS is a shortcut for router.Handle(http.MethodOptions, path, handle)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">OPTIONS</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>MethodOptions<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// POST is a shortcut for router.Handle(http.MethodPost, path, handle)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">POST</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>MethodPost<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// PUT is a shortcut for router.Handle(http.MethodPut, path, handle)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">PUT</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>MethodPut<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// PATCH is a shortcut for router.Handle(http.MethodPatch, path, handle)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">PATCH</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>MethodPatch<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// DELETE is a shortcut for router.Handle(http.MethodDelete, path, handle)</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">DELETE</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>MethodDelete<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>*Router.Handle</code>をラップしているだけです。</p>\n<p><code>*Router.Handle</code>に HTTP メソッド、パス、<code>Handle</code>型を渡します。</p>\n<p><code>Handle</code>型は</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Handle <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> Params<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>と定義されています。</p>\n<p><code>net/http</code>の<code>HandlerFunc</code>型を拡張した型のようです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> HandlerFunc <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ResponseWriter<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p><code>Handle</code>型の第三引数<code>Param</code>は下記です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Param is a single URL parameter, consisting of a key and a value.</span>\n<span class=\"token keyword\">type</span> Param <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tKey   <span class=\"token builtin\">string</span>\n\tValue <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Params is a Param-slice, as returned by the router.</span>\n<span class=\"token comment\">// The slice is ordered, the first URL parameter is also the first slice value.</span>\n<span class=\"token comment\">// It is therefore safe to read values by the index.</span>\n<span class=\"token keyword\">type</span> Params <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Param\n</code></pre></div>\n<p>単純にパラメータを格納しておくもののようです。</p>\n<p>お目当てのパラメータは<code>Params.ByName</code>メソッドで取得できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// ByName returns the value of the first Param which key matches the given name.</span>\n<span class=\"token comment\">// If no matching Param is found, an empty string is returned.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>ps Params<span class=\"token punctuation\">)</span> <span class=\"token function\">ByName</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ps <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> name <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>Value\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>なぜ<code>type Param map[string]string</code>で実装しないのでしょうか?</p>\n<p>理由がありそうなので<code>*Router.Handle</code>で実際にどのようにパスと<code>Handle</code>型を紐付けているのか見てみます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Handle registers a new request handle with the given path and method.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// For GET, POST, PUT, PATCH and DELETE requests the respective shortcut</span>\n<span class=\"token comment\">// functions can be used.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function is intended for bulk loading and to allow the usage of less</span>\n<span class=\"token comment\">// frequently used, non-standardized or custom methods (e.g. for internal</span>\n<span class=\"token comment\">// communication with a proxy).</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvarsCount <span class=\"token operator\">:=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 1</span>\n\t<span class=\"token keyword\">if</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method must not be empty\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path must begin with '/' in path '\"</span> <span class=\"token operator\">+</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> handle <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle must not be nil\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2</span>\n\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>SaveMatchedRoutePath <span class=\"token punctuation\">{</span>\n\t\tvarsCount<span class=\"token operator\">++</span>\n\t\thandle <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">saveMatchedRoutePath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3</span>\n\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>trees <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tr<span class=\"token punctuation\">.</span>trees <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 4</span>\n\troot <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> root <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\troot <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\t\tr<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root\n\n\t\tr<span class=\"token punctuation\">.</span>globalAllowed <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">allowed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 5</span>\n\troot<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Update maxParams</span>\n\t<span class=\"token keyword\">if</span> paramsCount <span class=\"token operator\">:=</span> <span class=\"token function\">countParams</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> paramsCount<span class=\"token operator\">+</span>varsCount <span class=\"token operator\">></span> r<span class=\"token punctuation\">.</span>maxParams <span class=\"token punctuation\">{</span>\n\t\tr<span class=\"token punctuation\">.</span>maxParams <span class=\"token operator\">=</span> paramsCount <span class=\"token operator\">+</span> varsCount\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Lazy-init paramsPool alloc func</span>\n\t<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>paramsPool<span class=\"token punctuation\">.</span>New <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&#x26;&#x26;</span> r<span class=\"token punctuation\">.</span>maxParams <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tr<span class=\"token punctuation\">.</span>paramsPool<span class=\"token punctuation\">.</span>New <span class=\"token operator\">=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n\t\t\tps <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span>Params<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>maxParams<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&#x26;</span>ps\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol>\n<li>バリデーション</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method must not be empty\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path must begin with '/' in path '\"</span> <span class=\"token operator\">+</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> handle <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle must not be nil\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol start=\"2\">\n<li><code>*Router.SaveMatchedRoutePath = true</code>を設定している場合のみ実行されます。</li>\n</ol>\n<p><code>Handle</code>型の実行の直前に<code>Params</code>にパスを追加します。</p>\n<p>便利やー</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Router<span class=\"token punctuation\">)</span> <span class=\"token function\">saveMatchedRoutePath</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> Handle <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> ps Params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> ps <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tpsp <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">getParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\tps <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>psp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token comment\">// ここ</span>\n\t\t\tps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Param<span class=\"token punctuation\">{</span>Key<span class=\"token punctuation\">:</span> MatchedRoutePathParam<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> ps<span class=\"token punctuation\">)</span>\n\t\t\tr<span class=\"token punctuation\">.</span><span class=\"token function\">putParams</span><span class=\"token punctuation\">(</span>psp<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tps <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">,</span> Param<span class=\"token punctuation\">{</span>Key<span class=\"token punctuation\">:</span> MatchedRoutePathParam<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> ps<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>SaveMatchedRoutePath <span class=\"token punctuation\">{</span>\n  varsCount<span class=\"token operator\">++</span>\n  handle <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">saveMatchedRoutePath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol start=\"3\">\n<li><code>*Router</code>に対して<code>Handle</code>が最初に呼び出された場合は初期化します。</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span>trees <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n  r<span class=\"token punctuation\">.</span>trees <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここで<code>*Router</code>を見てみることにします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Router is a http.Handler which can be used to dispatch requests to different</span>\n<span class=\"token comment\">// handler functions via configurable routes</span>\n<span class=\"token keyword\">type</span> Router <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\ttrees <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node\n\n\t<span class=\"token comment\">// comments...</span>\n\tRedirectTrailingSlash <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// comments...</span>\n\tRedirectFixedPath <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// comments...</span>\n\tHandleMethodNotAllowed <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// comments...</span>\n\tHandleOPTIONS <span class=\"token builtin\">bool</span>\n\n\t<span class=\"token comment\">// comments...</span>\n\tGlobalOPTIONS http<span class=\"token punctuation\">.</span>Handler\n\n\t<span class=\"token comment\">// comments...</span>\n\tglobalAllowed <span class=\"token builtin\">string</span>\n\n\t<span class=\"token comment\">// comments...</span>\n\tNotFound http<span class=\"token punctuation\">.</span>Handler\n\n\t<span class=\"token comment\">// comments...</span>\n\tMethodNotAllowed http<span class=\"token punctuation\">.</span>Handler\n\n\t<span class=\"token comment\">// comments...</span>\n\tPanicHandler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここで着目したいのは<code>trees</code>フィールドです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\">trees <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node\n</code></pre></div>\n<p><code>node</code>を見てみましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> node <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tpath      <span class=\"token builtin\">string</span>\n\twildChild <span class=\"token builtin\">bool</span>\n\tnType     nodeType\n\tmaxParams <span class=\"token builtin\">uint8</span>\n\tpriority  <span class=\"token builtin\">uint32</span>\n\tindices   <span class=\"token builtin\">string</span>\n\tchildren  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node\n\thandle    Handle\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>なんとなく見えてきました。</p>\n<p><code>node</code>構造体でパスと<code>Handle</code>型を紐付けていて、<code>node</code>を HTTP メソッドごとにツリー構造で管理しているようです。</p>\n<p>では<code>*Router.Handle</code>に戻ります。</p>\n<ol start=\"4\">\n<li>ここは登録したい HTTP メソッドがまだ<code>*Router.trees</code>に登録されていなければ初期化しているようです。</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\">root <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> root <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\troot <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n\t\tr<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root\n\n\t\tr<span class=\"token punctuation\">.</span>globalAllowed <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">allowed</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>*Router.allowed(path, reqMethod string) (allow string)</code>は長いので割愛。</p>\n<p>一応読みましたが、登録されている HTTP メソッドをカンマ区切りで返すだけです。</p>\n<p>しかもその結果を格納している<code>*Router.globalAllowed</code>はどこでも使われていません。</p>\n<p>よくわからん。。とりあえずスルー</p>\n<ol start=\"5\">\n<li>やっと見たいところです。パスに<code>Handle</code>型を紐付けます。</li>\n</ol>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\">root<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>やはり長い。。。</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// addRoute adds a node with the given handle to the path.</span>\n<span class=\"token comment\">// Not concurrency-safe!</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> handle Handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfullPath <span class=\"token operator\">:=</span> path\n\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t<span class=\"token comment\">// Empty tree</span>\n\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">=</span> root\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\nwalk<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Find the longest common prefix.</span>\n\t\t<span class=\"token comment\">// This also implies that the common prefix contains no ':' or '*'</span>\n\t\t<span class=\"token comment\">// since the existing key can't contain those chars.</span>\n\t\ti <span class=\"token operator\">:=</span> <span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// Split edge</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tchild <span class=\"token operator\">:=</span> node<span class=\"token punctuation\">{</span>\n\t\t\t\tpath<span class=\"token punctuation\">:</span>      n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\twildChild<span class=\"token punctuation\">:</span> n<span class=\"token punctuation\">.</span>wildChild<span class=\"token punctuation\">,</span>\n\t\t\t\tnType<span class=\"token punctuation\">:</span>     static<span class=\"token punctuation\">,</span>\n\t\t\t\tindices<span class=\"token punctuation\">:</span>   n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">,</span>\n\t\t\t\tchildren<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n\t\t\t\thandle<span class=\"token punctuation\">:</span>    n<span class=\"token punctuation\">.</span>handle<span class=\"token punctuation\">,</span>\n\t\t\t\tpriority<span class=\"token punctuation\">:</span>  n<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>node<span class=\"token punctuation\">{</span><span class=\"token operator\">&#x26;</span>child<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n\t\t\tn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\tn<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n\t\t\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\n\t\t\tn<span class=\"token punctuation\">.</span>wildChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Make new node a child of this node</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>wildChild <span class=\"token punctuation\">{</span>\n\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\n\t\t\t\t<span class=\"token comment\">// Check if the wildcard matches</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> path<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span>\n\t\t\t\t\t<span class=\"token comment\">// Adding a child to a catchAll is not possible</span>\n\t\t\t\t\tn<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token operator\">&#x26;&#x26;</span>\n\t\t\t\t\t<span class=\"token comment\">// Check for longer wildcard, e.g. :name and :names</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> path<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\">// Wildcard conflict</span>\n\t\t\t\t\tpathSeg <span class=\"token operator\">:=</span> path\n\t\t\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">!=</span> catchAll <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tpathSeg <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">SplitN</span><span class=\"token punctuation\">(</span>pathSeg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\tprefix <span class=\"token operator\">:=</span> fullPath<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">,</span> pathSeg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path\n\t\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span> <span class=\"token operator\">+</span> pathSeg <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' in new path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' conflicts with existing wildcard '\"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">.</span>path <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"' in existing prefix '\"</span> <span class=\"token operator\">+</span> prefix <span class=\"token operator\">+</span>\n\t\t\t\t\t\t<span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tidxc <span class=\"token operator\">:=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n\t\t\t<span class=\"token comment\">// '/' after param</span>\n\t\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>nType <span class=\"token operator\">==</span> param <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>priority<span class=\"token operator\">++</span>\n\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Check if a child with the next path byte exists</span>\n\t\t\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> idxc <span class=\"token punctuation\">{</span>\n\t\t\t\t\ti <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t\t\t\tn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\t\t\t<span class=\"token keyword\">continue</span> walk\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// Otherwise insert it</span>\n\t\t\t<span class=\"token keyword\">if</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">':'</span> <span class=\"token operator\">&#x26;&#x26;</span> idxc <span class=\"token operator\">!=</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// []byte for proper unicode char conversion, see #65</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>indices <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span>idxc<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t\t\tchild <span class=\"token operator\">:=</span> <span class=\"token operator\">&#x26;</span>node<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span>\n\t\t\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">incrementChildPrio</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t\tn <span class=\"token operator\">=</span> child\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tn<span class=\"token punctuation\">.</span><span class=\"token function\">insertChild</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// Otherwise add handle to current node</span>\n\t\t<span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a handle is already registered for path '\"</span> <span class=\"token operator\">+</span> fullPath <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tn<span class=\"token punctuation\">.</span>handle <span class=\"token operator\">=</span> handle\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>ここでツリー構造を組み立てています。</p>\n<p>ちょっと一つの記事で見ていくには分量が多すぎるのでまた次回にします。。。</p>\n<h1>Conclusion</h1>\n<p>httprouter の処理の流れとしては</p>\n<ol>\n<li>HTTP リクエストごとにパスを管理</li>\n<li>パスと実行したいハンドラをツリー構造で管理</li>\n</ol>\n<p>という感じです。</p>\n<p>次回以降は</p>\n<ol start=\"2\">\n<li>パスと実行したいハンドラをツリー構造で管理</li>\n</ol>\n<p>と、リクエストの際にどのように処理するのか読んでいきます。</p>\n<p>コードが短いとはいえ、細かい挙動まで見ていくのは大変ですなあ。</p>\n<p>それをするためにこのブログやっているのですがね。</p>\n","title":"httprouter","date":"2021-01-17","description":"Goの有名パッケージhttprouterを読みます。"}},"__N_SSG":true}